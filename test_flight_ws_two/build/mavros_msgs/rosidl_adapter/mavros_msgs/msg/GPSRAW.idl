// generated from rosidl_adapter/resource/msg.idl.em
// with input from mavros_msgs/msg/GPSRAW.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/Header.idl"

module mavros_msgs {
  module msg {
    module GPSRAW_Constants {
      const uint8 GPS_FIX_TYPE_NO_GPS = 0;
      const uint8 GPS_FIX_TYPE_NO_FIX = 1;
      const uint8 GPS_FIX_TYPE_2D_FIX = 2;
      const uint8 GPS_FIX_TYPE_3D_FIX = 3;
      const uint8 GPS_FIX_TYPE_DGPS = 4;
      const uint8 GPS_FIX_TYPE_RTK_FLOATR = 5;
      const uint8 GPS_FIX_TYPE_RTK_FIXEDR = 6;
      const uint8 GPS_FIX_TYPE_STATIC = 7;
      const uint8 GPS_FIX_TYPE_PPP = 8;
    };
    @verbatim (language="comment", text=
      " FCU GPS RAW message for the gps_status plugin" "\n"
      " A merge of <a href=\"https://mavlink.io/en/messages/common.html#GPS_RAW_INT\">mavlink GPS_RAW_INT</a> and" "\n"
      " <a href=\"https://mavlink.io/en/messages/common.html#GPS2_RAW\">mavlink GPS2_RAW</a> messages.")
    struct GPSRAW {
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        " GPS fix type")
      @unit (value="GPS_FIX_TYPE")
      uint8 fix_type;

      @verbatim (language="comment", text=
        " Latitude (WGS84, EGM96 ellipsoid)")
      @unit (value="degE7")
      int32 lat;

      @verbatim (language="comment", text=
        " Longitude (WGS84, EGM96 ellipsoid)")
      @unit (value="degE7")
      int32 lon;

      @verbatim (language="comment", text=
        " Altitude (MSL). Positive for up. Note that virtually all GPS modules provide the MSL altitude in addition to the WGS84 altitude.")
      @unit (value="mm")
      int32 alt;

      @verbatim (language="comment", text=
        " GPS HDOP horizontal dilution of position (unitless). If unknown, set to: UINT16_MAX")
      uint16 eph;

      @verbatim (language="comment", text=
        " GPS VDOP vertical dilution of position (unitless). If unknown, set to: UINT16_MAX")
      uint16 epv;

      @verbatim (language="comment", text=
        " GPS ground speed. If unknown, set to: UINT16_MAX")
      @unit (value="cm/s")
      uint16 vel;

      @verbatim (language="comment", text=
        " Course over ground (NOT heading, but direction of movement), 0.0..359.99 degrees. If unknown, set to: UINT16_MAX")
      @unit (value="cdeg")
      uint16 cog;

      @verbatim (language="comment", text=
        " Number of satellites visible. If unknown, set to 255")
      uint8 satellites_visible;

      @verbatim (language="comment", text=
        " -*- only available with MAVLink v2.0 and GPS_RAW_INT messages -*-" "\n"
        " [mm] Altitude (above WGS84, EGM96 ellipsoid). Positive for up.")
      @unit (value="mm")
      int32 alt_ellipsoid;

      @verbatim (language="comment", text=
        " Position uncertainty. Positive for up.")
      @unit (value="mm")
      uint32 h_acc;

      @verbatim (language="comment", text=
        " Altitude uncertainty. Positive for up.")
      @unit (value="mm")
      uint32 v_acc;

      @verbatim (language="comment", text=
        " Speed uncertainty. Positive for up.")
      @unit (value="mm")
      uint32 vel_acc;

      @verbatim (language="comment", text=
        " Heading / track uncertainty")
      @unit (value="degE5")
      int32 hdg_acc;

      @verbatim (language="comment", text=
        " Yaw in earth frame from north.")
      @unit (value="cdeg")
      uint16 yaw;

      @verbatim (language="comment", text=
        " -*- only available with MAVLink v2.0 and GPS2_RAW messages -*-" "\n"
        " Number of DGPS satellites")
      uint8 dgps_numch;

      @verbatim (language="comment", text=
        " Age of DGPS info")
      @unit (value="ms")
      uint32 dgps_age;
    };
  };
};
