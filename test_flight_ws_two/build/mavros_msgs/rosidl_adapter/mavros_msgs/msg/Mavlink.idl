// generated from rosidl_adapter/resource/msg.idl.em
// with input from mavros_msgs/msg/Mavlink.msg
// generated code does not contain a copyright notice

#include "std_msgs/msg/Header.idl"

module mavros_msgs {
  module msg {
    module Mavlink_Constants {
      const uint8 FRAMING_OK = 1;
      const uint8 FRAMING_BAD_CRC = 2;
      const uint8 FRAMING_BAD_SIGNATURE = 3;
      const uint8 MAVLINK_V10 = 254;
      const uint8 MAVLINK_V20 = 253;
    };
    @verbatim (language="comment", text=
      " Mavlink message transport type." "\n"
      "" "\n"
      " Used to transport mavlink_message_t via ROS topic" "\n"
      "" "\n"
      " :framing_status:" "\n"
      "       Frame decoding status: OK, CRC error, bad Signature (mavlink v2.0)" "\n"
      "       You may simply drop all non valid messages." "\n"
      "       Used for GCS Bridge to transport unknown messages." "\n"
      "" "\n"
      " :magic:" "\n"
      "       STX byte, used to determine protocol version v1.0 or v2.0." "\n"
      "" "\n"
      " Please use mavros_msgs::mavlink::convert() from <mavros_msgs/mavlink_convert.hpp>" "\n"
      " to convert between ROS and MAVLink message type")
    struct Mavlink {
      std_msgs::msg::Header header;

      uint8 framing_status;

      @verbatim (language="comment", text=
        " STX byte")
      uint8 magic;

      uint8 len;

      uint8 incompat_flags;

      uint8 compat_flags;

      uint8 seq;

      uint8 sysid;

      uint8 compid;

      @verbatim (language="comment", text=
        " 24-bit message id")
      uint32 msgid;

      uint16 checksum;

      @verbatim (language="comment", text=
        " max size: (255+2+7)/8")
      sequence<uint64, 33> payload64;

      @verbatim (language="comment", text=
        " optional signature, max size: 13")
      sequence<uint8, 13> signature;
    };
  };
};
